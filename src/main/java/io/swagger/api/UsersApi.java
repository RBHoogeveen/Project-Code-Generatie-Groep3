/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-21T11:24:34.915Z[GMT]")
@Validated
public interface UsersApi {

    @Operation(summary = "Fetches a single user by id", description = "Fetches a single user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The fetched users", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUserById(@Parameter(in = ParameterIn.PATH, description = "The id", required=true, schema=@Schema()) @PathVariable("id") String id);


    @Operation(summary = "Fetches users by (part of) username", description = "Fetches users by (part of) username", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The fetched users", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/users/searchTerm",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUserByUsername(@NotNull @Parameter(in = ParameterIn.QUERY, description = "the searchterm" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "searchTerm", required = true) String searchTerm);


    @Operation(summary = "Fetches list of users", description = "Fetches users", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The fetched users", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getUsers(@Min(0)@Parameter(in = ParameterIn.QUERY, description = "number of records to skip for pagination" ,schema=@Schema(allowableValues={  }
)) @Valid @RequestParam(value = "skip", required = false) Integer skip, @Min(0) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "maximum number of records to return" ,schema=@Schema(allowableValues={  }, maximum="50"
, defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Integer limit);


    @Operation(summary = "Create new user", description = "Making a new user", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Succesfully created the user", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized acces"),
        
        @ApiResponse(responseCode = "409", description = "This user already exists") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<List<User>> registerUser(@Parameter(in = ParameterIn.DEFAULT, description = "Register", schema=@Schema()) @Valid @RequestBody User body);


    @Operation(summary = "Updates a user", description = "This can only be done by the logged in user.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "user" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Update succesfull"),
        
        @ApiResponse(responseCode = "400", description = "Invalid user supplied"),
        
        @ApiResponse(responseCode = "404", description = "User not found") })
    @RequestMapping(value = "/users/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateUser(@Parameter(in = ParameterIn.PATH, description = "name that need to be updated", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "User to update", schema=@Schema()) @Valid @RequestBody User body);

}

