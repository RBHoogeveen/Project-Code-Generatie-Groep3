/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Account;
import io.swagger.model.Deposit;
import io.swagger.model.Transaction;
import io.swagger.model.Withdrawal;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-21T11:24:34.915Z[GMT]")
@Validated
public interface AccountsApi {

    @Operation(summary = "Deposit from current to savings account", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account - deposit" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "deposit done"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid") })
    @RequestMapping(value = "/accounts/deposit",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> deposit(@Parameter(in = ParameterIn.DEFAULT, description = "deposit to create", schema=@Schema()) @Valid @RequestBody Deposit body);


    @Operation(summary = "Fetches list of deposits", description = "Fetches deposists", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account - deposit" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The fetched deposits", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Deposit.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/deposit",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Deposit>> getDeposits(@Min(0)@Parameter(in = ParameterIn.QUERY, description = "number of records to skip for pagination" ,schema=@Schema(allowableValues={  }
)) @Valid @RequestParam(value = "skip", required = false) Integer skip, @Min(0) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "maximum number of records to return" ,schema=@Schema(allowableValues={  }, maximum="50"
, defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Integer limit);


    @Operation(summary = "Fetches list of transactions", description = "Fetches transactions", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account - transaction" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The fetched transactions", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/transaction",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getTransactions(@Min(0)@Parameter(in = ParameterIn.QUERY, description = "number of records to skip for pagination" ,schema=@Schema(allowableValues={  }
)) @Valid @RequestParam(value = "skip", required = false) Integer skip, @Min(0) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "maximum number of records to return" ,schema=@Schema(allowableValues={  }, maximum="50"
, defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Integer limit);


    @Operation(summary = "Get users accounts", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The account from the user", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Account.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Account>> getUserAccount(@NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "username", required = true) String username, @NotNull @Parameter(in = ParameterIn.QUERY, description = "" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "include inactive", required = true) Boolean includeInactive);


    @Operation(summary = "Fetches list of withdrawals", description = "Fetches withdrawals", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account - withdrawal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "The fetched withdrawals.", content = @Content(array = @ArraySchema(schema = @Schema(implementation = Transaction.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/accounts/withdrawal",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Transaction>> getWithdrawals(@Min(0)@Parameter(in = ParameterIn.QUERY, description = "number of records to skip for pagination" ,schema=@Schema(allowableValues={  }
)) @Valid @RequestParam(value = "skip", required = false) Integer skip, @Min(0) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "maximum number of records to return" ,schema=@Schema(allowableValues={  }, maximum="50"
, defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Integer limit);


    @Operation(summary = "A transaction between two current accounts.", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account - transaction" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation"),
        
        @ApiResponse(responseCode = "400", description = "Invalid parameters.") })
    @RequestMapping(value = "/accounts/transaction",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> transaction(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Transaction body);


    @Operation(summary = "Updates an account.", description = "Update an account (only doable by employee).", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Update succesfull"),
        
        @ApiResponse(responseCode = "400", description = "Invalid account supplied"),
        
        @ApiResponse(responseCode = "404", description = "Account not found") })
    @RequestMapping(value = "/accounts",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateAccount(@NotNull @Parameter(in = ParameterIn.QUERY, description = "IBAN of account that needs udating." ,required=true,schema=@Schema()) @Valid @RequestParam(value = "iban", required = true) String iban, @Parameter(in = ParameterIn.DEFAULT, description = "Account to update", schema=@Schema()) @Valid @RequestBody Account body);


    @Operation(summary = "Withdraw from savings to current account.", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "account - withdrawal" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "withdrawel done"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid") })
    @RequestMapping(value = "/accounts/withdrawal",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> withdrawal(@Parameter(in = ParameterIn.DEFAULT, description = "deposit to create", schema=@Schema()) @Valid @RequestBody Withdrawal body);

}

